{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst inputDateTime = document.querySelector('#datetime-picker');\nconst startBtn = document.querySelector('button[data-start]');\nconst elementDays = document.querySelector('span[data-days]');\nconst elementHours = document.querySelector('span[data-hours]');\nconst elementMinutes = document.querySelector('span[data-minutes]');\nconst elementSeconds = document.querySelector('span[data-seconds]');\n\nstartBtn.addEventListener('click', onClickStartTimer);\n\nlet userSelectedDate = '';\nlet intervalId = '';\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    if (selectedDates[0] <= Date.now()) {\n      addErrorMessage();\n    } else {\n      userSelectedDate = selectedDates[0];\n      startBtn.disabled = false;\n    }\n  },\n};\n\nflatpickr(inputDateTime, options);\n\nfunction calculateTimeLeft() {\n  const time = userSelectedDate - new Date();\n  console.log(time);\n  if (time <= 0) {\n    clearInterval(intervalId);\n    return;\n  }\n  const { days, hours, minutes, seconds } = convertMs(time);\n  elementDays.textContent = String(days).padStart(2, 0);\n  elementHours.textContent = String(hours).padStart(2, 0);\n  elementMinutes.textContent = String(minutes).padStart(2, 0);\n  elementSeconds.textContent = String(seconds).padStart(2, 0);\n  startBtn.disabled = true;\n}\n\nfunction onClickStartTimer() {\n  intervalId = setInterval(calculateTimeLeft, 1000);\n}\n\nfunction addErrorMessage() {\n  iziToast.error({\n    backgroundColor: 'tomato',\n    message: 'Please choose a date in the future',\n    messageColor: 'white',\n    messageSize: '20',\n    position: 'topRight',\n    close: true,\n  });\n}\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n"],"names":["inputDateTime","startBtn","elementDays","elementHours","elementMinutes","elementSeconds","onClickStartTimer","userSelectedDate","intervalId","options","selectedDates","addErrorMessage","flatpickr","calculateTimeLeft","time","days","hours","minutes","seconds","convertMs","iziToast","ms"],"mappings":"2GAMA,MAAMA,EAAgB,SAAS,cAAc,kBAAkB,EACzDC,EAAW,SAAS,cAAc,oBAAoB,EACtDC,EAAc,SAAS,cAAc,iBAAiB,EACtDC,EAAe,SAAS,cAAc,kBAAkB,EACxDC,EAAiB,SAAS,cAAc,oBAAoB,EAC5DC,EAAiB,SAAS,cAAc,oBAAoB,EAElEJ,EAAS,iBAAiB,QAASK,CAAiB,EAEpD,IAAIC,EAAmB,GACnBC,EAAa,GAEjB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACjBA,EAAc,CAAC,GAAK,KAAK,IAAG,EAC9BC,KAEAJ,EAAmBG,EAAc,CAAC,EAClCT,EAAS,SAAW,GAEvB,CACH,EAEAW,EAAUZ,EAAeS,CAAO,EAEhC,SAASI,GAAoB,CAC3B,MAAMC,EAAOP,EAAmB,IAAI,KAEpC,GADA,QAAQ,IAAIO,CAAI,EACZA,GAAQ,EAAG,CACb,cAAcN,CAAU,EACxB,MACD,CACD,KAAM,CAAE,KAAAO,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAI,EACxDZ,EAAY,YAAc,OAAOa,CAAI,EAAE,SAAS,EAAG,CAAC,EACpDZ,EAAa,YAAc,OAAOa,CAAK,EAAE,SAAS,EAAG,CAAC,EACtDZ,EAAe,YAAc,OAAOa,CAAO,EAAE,SAAS,EAAG,CAAC,EAC1DZ,EAAe,YAAc,OAAOa,CAAO,EAAE,SAAS,EAAG,CAAC,EAC1DjB,EAAS,SAAW,EACtB,CAEA,SAASK,GAAoB,CAC3BE,EAAa,YAAYK,EAAmB,GAAI,CAClD,CAEA,SAASF,GAAkB,CACzBS,EAAS,MAAM,CACb,gBAAiB,SACjB,QAAS,qCACT,aAAc,QACd,YAAa,KACb,SAAU,WACV,MAAO,EACX,CAAG,CACH,CAEA,SAASD,EAAUE,EAAI,CAQrB,MAAMN,EAAO,KAAK,MAAMM,EAAK,KAAG,EAE1BL,EAAQ,KAAK,MAAOK,EAAK,MAAO,IAAI,EAEpCJ,EAAU,KAAK,MAAQI,EAAK,MAAO,KAAQ,GAAM,EAEjDH,EAAU,KAAK,MAASG,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAN,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}